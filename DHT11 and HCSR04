//this code uses a DHT11 sensor and an HC-SR04 Ultrasonic Sensor. they work independently.
// both sensors are digital outputs

#include <DHT.h>  // Include the DHT sensor library

// HC-SR04 Ultrasonic Sensor Pins
const int trigPin = 9;    // Trigger pin connected to pin 9
const int echoPin = 10;   // Echo pin connected to pin 10
// DHT11 Sensor Pin
const int dhtPin = 7;     // DHT11 data pin connected to pin 7
DHT dht(dhtPin, DHT11);   // Initialize the DHT sensor for DHT11
// Variables for Ultrasonic Sensor
long duration;
int distance;
// Timing variables for ultrasonic sensor
unsigned long lastTriggerTime = 0;
unsigned long triggerInterval = 60;  // Interval between triggers (in milliseconds)
// Timing variables for serial updates
unsigned long lastDistanceUpdate = 0;
unsigned long distanceUpdateInterval = 1000;  // Update Serial Monitor with distance every 1 second
unsigned long lastTemperatureUpdate = 0;
unsigned long temperatureUpdateInterval = 2000;  // Update Serial Monitor with temperature/humidity every 2 seconds
void setup() {
  pinMode(trigPin, OUTPUT);   // Set the trigPin as an output
  pinMode(echoPin, INPUT);    // Set the echoPin as an input
  
  // Start serial communication
  Serial.begin(9600);
  
  // Initialize DHT sensor
  dht.begin();
}
void loop() {
  unsigned long currentMillis = millis();
  // HC-SR04 Ultrasonic Sensor: Trigger the sensor every 'triggerInterval' milliseconds
  if (currentMillis - lastTriggerTime >= triggerInterval) {
    lastTriggerTime = currentMillis;
    
    // Send a 10-microsecond pulse to trigger the ultrasonic sensor
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);
    // Measure the duration of the pulse that returns from the echo
    duration = pulseIn(echoPin, HIGH);
    
    // Calculate the distance based on the duration
    distance = duration * 0.0343 / 2;  // Speed of sound is 0.0343 cm/µs, divide by 2 for the round trip
    // Print distance to Serial Monitor (updated every 1 second)
    if (currentMillis - lastDistanceUpdate >= distanceUpdateInterval) {
      lastDistanceUpdate = currentMillis;
      Serial.print("Distance: ");
      Serial.print(distance);
      Serial.println(" cm");
    }
  }
  
  // DHT11 Temperature and Humidity: Update every 2 seconds
  if (currentMillis - lastTemperatureUpdate >= temperatureUpdateInterval) {
    lastTemperatureUpdate = currentMillis;
    
    // Read humidity and temperature from the DHT11 sensor
    float humidity = dht.readHumidity();
    float temperature = dht.readTemperature();  // Temperature in Celsius
    
    // Check if reading is valid (DHT sensor can sometimes return NaN)
    if (isnan(humidity) || isnan(temperature)) {
      Serial.println("Failed to read from DHT sensor!");
    } else {
      // Print temperature and humidity to the Serial Monitor
      Serial.print("Temperature: ");
      Serial.print(temperature);
      Serial.print(" °C, ");
      Serial.print("Humidity: ");
      Serial.print(humidity);
      Serial.println(" %");
    }
  }
}
